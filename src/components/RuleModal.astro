---
export interface Props {
  rule: any;
  index: number;
}
declare global {
  interface Window {
    currentRules: any[];
  }
}
const { rule, index } = Astro.props;
---

<div class="bg-white shadow-md rounded px-6 py-4 mb-4 cursor-move transition-all duration-200 hover:shadow-lg" data-id={index} draggable="true">
  <div class="flex justify-between items-center mb-2">
    <h3 class="text-lg font-semibold text-gray-800">{rule.name}</h3>
    <span class="text-gray-500 opacity-50 hover:opacity-100 transition-opacity duration-200">â˜°</span>
  </div>
  <p class="text-sm text-gray-600 mb-4">{rule.description || 'No description'}</p>
  <div class="flex justify-between">
    <button class="viewRule bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded text-sm transition-colors duration-200">View</button>
    <button class="editRule bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded text-sm transition-colors duration-200">Edit</button>
    <button class="deleteRule bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded text-sm transition-colors duration-200">Delete</button>
  </div>
</div>

<script>
  import { viewRule, editRule, deleteRule } from "../scripts/rule-actions.js";
  import { dragStart, dragOver, drop, dragEnd } from "../scripts/drag-and-drop.js";

  document.querySelectorAll("[data-id]").forEach((modal) => {
    const index = parseInt(modal.getAttribute("data-id"));
    modal.querySelector(".viewRule").addEventListener("click", () => viewRule(window.currentRules[index]));
    modal.querySelector(".editRule").addEventListener("click", () => editRule(window.currentRules[index], index));
    modal.querySelector(".deleteRule").addEventListener("click", () => deleteRule(index));

    modal.addEventListener("dragstart", dragStart);
    modal.addEventListener("dragover", dragOver);
    modal.addEventListener("drop", drop);
    modal.addEventListener("dragend", dragEnd);
  });
</script>
